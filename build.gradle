buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = "TimeConqueror's Maven"
            url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.7-patched'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.31"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.buildProps = prop
}

version = "${buildProps["minecraft.version"]}-${buildProps["jitl.version"]}"
group = "net.pm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Journey-Into-The-Light"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

sourceSets {
    main {
        ext.refMap = "mixins.jitl.refmap.json"
    }
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
    maven {
        name = "Curios Maven"
        url = "https://maven.theillusivec4.top/"
    }
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'snapshot', version: buildProps["snapshot_mappings"]
    } else {
        mappings channel: 'official', version: buildProps["minecraft.version"]
    }
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    def extraArgs = Arrays.asList('--mixin mixins.jitl.json'.split(' '))
    def extraVmArgs = Arrays.asList('-Dmixin.debug.countInjections=true', '-Dmixin.debug.verbose=true', '-Dmixin.env.disableRefMap=true')
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                jitl {
                    source sourceSets.main

                    resource sourceSets.main.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'RESOURCE_SYSTEM'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                jitl {
                    source sourceSets.main

                    resource sourceSets.main.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
//            property 'forge.logging.console.level', 'debug'

            args '--mod', 'jitl', '--all', '--output', ("\"" + projectDir.path + "/src/generated/resources/\"")
            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                jitl {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'

    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.137:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.137")

    implementation 'org.jetbrains:annotations:20.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    // you can include any mod in `runtimeMods` folder and it will be also loaded
    if(file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation fg.deobf('ru.timeconqueror:TimeCore:1.16.5-3.4.1.0.build10:dev', true)
    implementation fg.deobf('top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.0')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "jitl",
                "Specification-Vendor"    : "The_SlayerMC, Time_Conqueror, Dizzlepop12",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "The_SlayerMC, Time_Conqueror, Dizzlepop12",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.jitl.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    it.archiveClassifier = 'sources'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/maven"
        }
    }
}